{"version":3,"sources":["utils/dateHelpers.ts","features/app/appSlice.ts","components/alert/alertSlice.ts","utils/forecastHelpers.ts","components/forecast/forcastSlice.ts","app/store.ts","services/alert.service.ts","services/request.service.ts","services/forecast.service.ts","assets/images/loading.svg","features/loading/Loading.tsx","components/unitSwitch/UnitSwitch.tsx","utils/temperatureHelpers.ts","components/weather/Weather.tsx","components/carousel/Carousel.tsx","components/BarChart/BarChart.tsx","components/weatherChart/WeatherChart.tsx","services/chart.service.ts","features/forcast/Forecast.tsx","features/forcast/forcastSlice.ts","components/alert/Alert.tsx","features/app/App.tsx","reportWebVitals.ts","components/provider/Provider.tsx","components/errorBoundary/ErrorBoundary.tsx","index.tsx","components/BarChart/BarChart.module.css","features/loading/Loading.module.css","components/weather/Weather.module.css","components/carousel/Carousel.module.css","components/errorBoundary/ErrorBoundary.module.css"],"names":["dateFromDatetime","datetime","moment","format","app","forecasts","alert","message","segmentsFromForecast","activeForecast","filter","forecast","date","segmentsFromForecasts","activeForecasts","activeDates","map","includes","unit","pageIndex","activeForecastDt","reducers","combineReducers","state","action","type","dt_txt","dt","createStore","pushAlertMessage","store","dispatch","cancel","axios","CancelToken","source","getData","url","a","get","response","data","list","endpoint","process","result","Loading","className","styles","root","Box","display","flexDirection","alignItems","loader","src","loadingImage","alt","Typography","variant","align","color","UnitSwitch","onChange","handleChange","event","value","target","isChecked","selectedUnit","Grid","container","justify","item","xs","sm","my","Paper","data-testid","spacing","FormControlLabel","name","checked","control","Radio","label","memo","withUnit","temperature","fahrenheit","celsius","averageForecastTemp","main","converted","round","convertToUnit","temp_min","temp_max","Weather","icon","segments","onClick","theme","useTheme","weather","iconImage","totalTemp","reduce","temp","segment","averageTemp","length","averageSegmentTemp","activeCardBackground","palette","grey","Card","card","style","backgroundColor","CardContent","description","NavigateButton","direction","onNavigate","testId","capitalize","Icon","NavigateBeforeOutlined","NavigateNextOutlined","IconButton","aria-label","navigationButton","CarouselNavigator","navigators","justifyButtons","navigateButtons","navigator","mb","WeatherCarousel","weatherSegments","onSelect","d3","select","selectAll","axisBottom","scaleLinear","axisLeft","scaleBand","max","baseTooltipDiamension","width","height","makeDivId","str","replace","toLowerCase","BarChart","chartId","left","top","right","bottom","fill","suffix","useState","chartWidth","setChartWidth","chartHeight","setChartHeight","barChartWrapper","useRef","barChart","chartAreaWidth","chartAreaHeight","setDiamensions","mutation","contentRect","contentRectWidth","contentRectHeight","console","log","useEffect","renderChart","observer","ResizeObserver","currentNode","current","observe","unobserve","disconnect","calculateTooltipDiamension","tooltipHoverMargin","x","offsetX","y","offsetY","document","getElementById","getBoundingClientRect","tooltipWidth","tooltipHeight","marginLeft","min","d","Math","clamp","marginTop","handleMouseOverVoronoiWrapper","point","__data__","text","time","handleMouseMove","handleMouseOut","svgObj","domain","range","padding","nice","rangeRound","attr","bandwidth","on","call","tickFormat","ticks","id","ref","transform","random","axis","tooltipWrapper","gutterBottom","pointWrapper","pointer","WeatherChart","chartConfig","segement","secondary","sufix","getWeatherChartConfig","isEqual","connect","props","derived","uniqBy","startIndex","this","dailyForecasts","splice","canPrevious","canNext","push","find","replaceUnit","incrementPageIndex","decrementPageIndex","replaceActiveForecastDt","activeForecastSegments","activeForecastsSegments","carouselNavigators","handleUnitChange","useCallback","handleCarouselNavigate","defaultDt","setDefaultActiveForcast","isOpen","Boolean","pushMessage","clearMessage","handleClose","Snackbar","open","autoHideDuration","size","Close","fontSize","onClose","hasForecasts","replaceForecasts","cancelListForecast","listForecast","Container","maxWidth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createTheme","typography","fontFamily","Provider","children","ThemeProvider","ErrorBoundary","error","Component","ReactDOM","render","StrictMode","CssBaseline","module","exports"],"mappings":"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","file":"static/js/main.56b967ea.chunk.js","sourcesContent":["import moment from 'moment'\n\nexport const dateFromDatetime = (datetime: string) => {\n  return moment(datetime).format('LL')\n}\n\nexport const timeFromDatetime = (datetime: string) => {\n  return moment(datetime).format('LT')\n}\n","import { AnyAction } from 'redux'\nimport { ForecastData } from '../../services/forecast.service'\nimport { dateFromDatetime } from '../../utils/dateHelpers'\n\ninterface AppState {\n  forecasts: ForecastData[]\n}\n\nexport interface AppActions {\n  replaceForecasts(forecasts: ForecastData[]): AnyAction\n}\n\nexport interface AppSelectors extends AppState {\n  hasForecasts: boolean\n}\n\nconst app: AppState = {\n  forecasts: []\n}\n\nexport const actions: AppActions = {\n  replaceForecasts (forecasts) {\n    return { type: 'REPLACE_APP_FORECASTS', forecasts }\n  }\n}\n\nexport function reducers (state = app, action: AnyAction) {\n  switch (action.type) {\n    case 'REPLACE_APP_FORECASTS': {\n      const forecasts = action.forecasts as ForecastData[]\n      app.forecasts = forecasts.map((forecast) => {\n        forecast.date = dateFromDatetime(forecast.dt_txt)\n        return forecast\n      })\n      return { ...app }\n    }\n    default:\n      return state\n  }\n}\n\nexport function selectors (state: { app: AppState }) {\n  const current = state.app\n  const derived = {\n    hasForecasts: Boolean(current.forecasts[0])\n  }\n  return { ...current, ...derived }\n}\n","import { AnyAction } from 'redux'\n\ninterface AlertState {\n  message: string | null\n}\n\nexport interface AlertActions {\n  pushMessage(message: string): AnyAction\n  clearMessage(): AnyAction\n}\n\nexport interface AlertSelectors extends AlertState {\n  isOpen: boolean\n}\n\nconst alert: AlertState = {\n  message: null\n}\n\nexport const actions: AlertActions = {\n  pushMessage (message) {\n    return { type: 'PUSH_ALERT_MESSAGE', message }\n  },\n  clearMessage () {\n    return { type: 'CLEAR_ALERT_MESSAGE' }\n  }\n}\n\nexport function reducers (state = alert, action: AnyAction) {\n  switch (action.type) {\n    case 'PUSH_ALERT_MESSAGE':\n      alert.message = action.message\n      return { ...alert }\n    case 'CLEAR_ALERT_MESSAGE':\n      alert.message = null\n      return { ...alert }\n    default:\n      return state\n  }\n}\n\nexport function selectors (state: { alert: AlertState }): AlertSelectors {\n  const current = state.alert\n  const derived = {\n    isOpen: Boolean(state.alert.message)\n  }\n  return { ...current, ...derived }\n}\n","import { ForecastData } from '../services/forecast.service'\n\nexport const segmentsFromForecast = (activeForecast: ForecastData, forecasts: ForecastData[]) => {\n  return forecasts.filter((forecast) => forecast.date === activeForecast.date)\n}\n\nexport const segmentsFromForecasts = (activeForecasts: ForecastData[], forecasts: ForecastData[]) => {\n  const activeDates = activeForecasts.map((forecast) => forecast.date)\n  return forecasts.filter((forecast) => activeDates.includes(forecast.date))\n}\n","import { AnyAction } from 'redux'\nimport { uniqBy } from 'lodash'\nimport { ForecastData } from '../../services/forecast.service'\nimport { NavigateDirection } from '../carousel/Carousel'\nimport { ForecastProps } from './Forecast'\nimport { segmentsFromForecast, segmentsFromForecasts } from '../../utils/forecastHelpers'\n\nexport type Unit = 'celsius' | 'fahrenheit'\n\ninterface ForecastState {\n  unit: Unit\n  pageIndex: number\n  activeForecastDt: ForecastData['dt']\n}\n\nexport interface ForecastActions {\n  replaceUnit(unit: Unit): AnyAction\n  incrementPageIndex(): AnyAction\n  decrementPageIndex(): AnyAction\n  replaceActiveForecastDt(dt: number): AnyAction\n}\n\nexport interface ForecastSelectors extends ForecastState {\n  dailyForecasts: ForecastData[]\n  activeForecasts: ForecastData[]\n  activeForecastsSegments: ForecastData[]\n  carouselNavigators: NavigateDirection[]\n  activeForecast: ForecastData | null\n  activeForecastSegments: ForecastData[]\n}\n\nconst forecast: ForecastState = {\n  unit: 'fahrenheit',\n  pageIndex: 0,\n  activeForecastDt: 0\n}\n\nexport const actions: ForecastActions = {\n  replaceUnit (unit) {\n    return { type: 'REPLACE_FORECAST_UNIT', unit }\n  },\n  incrementPageIndex () {\n    return { type: 'INCREMENT_FORECAST_PAGE_INDEX' }\n  },\n  decrementPageIndex () {\n    return { type: 'DECREMENT_FORECAST_PAGE_INDEX' }\n  },\n  replaceActiveForecastDt (dt) {\n    return { type: 'REPLACE_FORECAST_ACTIVE_FORECAST_DT', dt }\n  }\n}\n\nexport function reducers (state = forecast, action: AnyAction) {\n  switch (action.type) {\n    case 'REPLACE_FORECAST_UNIT':\n      forecast.unit = action.unit\n      return { ...forecast }\n    case 'INCREMENT_FORECAST_PAGE_INDEX':\n      forecast.pageIndex = forecast.pageIndex + 1\n      return { ...forecast }\n    case 'DECREMENT_FORECAST_PAGE_INDEX':\n      forecast.pageIndex = forecast.pageIndex - 1\n      return { ...forecast }\n    case 'REPLACE_FORECAST_ACTIVE_FORECAST_DT':\n      forecast.activeForecastDt = action.dt\n      return { ...forecast }\n    default:\n      return state\n  }\n}\n\nexport function selectors (state: { forecast: ForecastState }, props: ForecastProps): ForecastSelectors {\n  const carouselSize = 3\n  const current = state.forecast\n  const derived = {\n    get dailyForecasts () {\n      return uniqBy(props.forecasts, 'date')\n    },\n    get activeForecasts () {\n      const { pageIndex: startIndex } = current\n      return this.dailyForecasts.splice(startIndex, carouselSize)\n    },\n    get activeForecastsSegments () {\n      return segmentsFromForecasts(this.activeForecasts, props.forecasts)\n    },\n    get carouselNavigators () {\n      const navigators: NavigateDirection[] = []\n      const canPrevious = current.pageIndex > 0\n      const canNext = this.dailyForecasts[current.pageIndex + carouselSize]\n      if (canPrevious) navigators.push('previous')\n      if (canNext) navigators.push('next')\n      return navigators\n    },\n    get activeForecast () {\n      const { activeForecastDt: dt } = current\n      const active = this.dailyForecasts.find((forecast) => forecast.dt === dt)\n      return active || null\n    },\n    get activeForecastSegments () {\n      if (!this.activeForecast) return []\n      return segmentsFromForecast(this.activeForecast, props.forecasts)\n    }\n  }\n  return { ...current, ...derived }\n}\n","import { combineReducers, createStore } from 'redux'\nimport { reducers as app } from '../features/app/appSlice'\nimport { reducers as alert } from '../components/alert/alertSlice'\nimport { reducers as forecast } from '../components/forecast/forcastSlice'\n\nconst reducers = combineReducers({\n  app,\n  alert,\n  forecast\n})\n\nexport default createStore(reducers)\n","import store from '../app/store'\n\nconst pushAlertMessage = (message: string) => {\n  store.dispatch({ type: 'PUSH_ALERT_MESSAGE', message })\n}\n\nconst clearAlertMessage = () => {\n  store.dispatch({ type: 'CLEAR_ALERT_MESSAGE' })\n}\n\nexport { pushAlertMessage, clearAlertMessage }\n","import axios from 'axios'\nimport { pushAlertMessage } from './alert.service'\n\nexport const cancel = () => {\n  const source = axios.CancelToken.source()\n  source.cancel()\n}\n\nexport const getData = async (url: string) => {\n  try {\n    const response = await axios.get(url)\n    return response.data\n  } catch (error) {\n    const { response } = error\n    const message = response ? response.data.message : error.message\n    pushAlertMessage(message)\n  }\n}\n","import { cancel, getData } from './request.service'\n\nconst apiUrl = 'https://api.openweathermap.org'\nconst weatherMapUrl = 'http://openweathermap.org'\nconst apiKey = process.env.REACT_APP_OPENWEATHER_API_KEY\nconst location = process.env.REACT_APP_OPENWEATHER_LOCATION\n\nexport interface WeatherData {\n  main: string\n  description: string\n  icon: string\n}\n\nexport interface ForecastData {\n  dt: number\n  main: {\n    'temp_min': number\n    'temp_max': number\n  }\n  weather: WeatherData[]\n  'dt_txt': string\n  date?: string\n}\n\nexport type ForecastListCancel = () => void\ntype ForecastListResult = [ForecastData[] | null, ForecastListCancel]\n\nexport const list = async (): Promise<ForecastListResult> => {\n  const endpoint = `${apiUrl}/data/2.5/forecast`\n  const days = 40\n  const url = `${endpoint}?q=${location}&APPID=${apiKey}&cnt=${days}&units=imperial`\n  const response = await getData(url)\n  const result = response ? response.list : []\n  return [result, cancel]\n}\n\nexport const iconImage = (icon: WeatherData['icon']) => {\n  return `${weatherMapUrl}/img/wn/${icon}.png`\n}\n","export default __webpack_public_path__ + \"static/media/loading.8261050f.svg\";","import React from 'react'\nimport { Box, Typography } from '@material-ui/core'\nimport loadingImage from '../../assets/images/loading.svg'\nimport styles from './Loading.module.css'\n\nexport default function Loading () {\n  return (\n    <div className={styles.root}>\n      <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n        <img className={styles.loader} src={loadingImage} alt=\"Four bubbles bouncing\" />\n        <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n          <Typography variant=\"h6\" align=\"center\">\n            Loading...\n          </Typography>\n          <Typography color=\"textSecondary\" align=\"center\">\n            Please wait while we are collecting weather data for you!!\n          </Typography>\n        </Box>\n      </Box>\n    </div>\n  )\n}\n","import React, { ChangeEvent, memo } from 'react'\nimport { Box, FormControlLabel, Grid, Paper, Radio } from '@material-ui/core'\nimport { Unit } from '../forecast/forcastSlice'\n\ninterface UnitSwitchProps {\n  unit: Unit\n  onChange: (unit: Unit) => void\n}\n\nfunction UnitSwitch ({ unit, onChange }: UnitSwitchProps) {\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target\n    onChange(value as Unit)\n  }\n\n  const isChecked = (selectedUnit: Unit) => (unit === selectedUnit)\n\n  return (\n    <Grid container justify=\"center\">\n      <Grid item xs={10} sm={6}>\n        <Box my={4}>\n          <Paper variant=\"outlined\" data-testid=\"unitSwitch\">\n            <Grid container justify=\"center\" spacing={2}>\n              <Grid item>\n                <FormControlLabel\n                  name=\"unit\"\n                  value=\"celsius\"\n                  checked={isChecked('celsius')}\n                  control={<Radio onChange={handleChange} />}\n                  label=\"Celsius\"\n                  data-testid=\"celsiusUnit\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  name=\"unit\"\n                  value=\"fahrenheit\"\n                  checked={isChecked('fahrenheit')}\n                  control={<Radio onChange={handleChange} />}\n                  label=\"Fahrenheit\"\n                  data-testid=\"fahrenheitUnit\"\n                />\n              </Grid>\n            </Grid>\n          </Paper>\n        </Box>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default memo(UnitSwitch)\n","import { round } from 'lodash'\nimport { Unit } from '../components/forecast/forcastSlice'\nimport { ForecastData } from '../services/forecast.service'\n\nexport const fahrenheitToCelsius = (fahrenheit: number) => {\n  return (fahrenheit - 32) * (5 / 9)\n}\n\nexport const convertToUnit = (temperature: number, unit: Unit) => {\n  const converted = unit === 'fahrenheit' ? temperature : fahrenheitToCelsius(temperature)\n  return round(converted)\n}\n\nexport const withUnit = (temperature: number, unit: Unit) => {\n  const symbols: Record<Unit, string> = {\n    fahrenheit: '℉',\n    celsius: '℃'\n  }\n  return `${temperature} ${symbols[unit]}`\n}\n\nexport const averageForecastTemp = (forecast: ForecastData, unit: Unit) => {\n  const { temp_min: tempMin, temp_max: tempMax } = forecast.main\n  const average = (tempMin + tempMax) / 2\n  return convertToUnit(average, unit)\n}\n\nexport const averageSegmentTemp = (segments: ForecastData[], unit: Unit) => {\n  const totalTemp = segments.reduce((temp, segment) => {\n    return temp + averageForecastTemp(segment, unit)\n  }, 0)\n  const averageTemp = round(totalTemp / segments.length)\n  return withUnit(averageTemp, unit)\n}\n","import React from 'react'\nimport { useTheme } from '@material-ui/core/styles'\nimport { Card, CardContent, Grid, Typography } from '@material-ui/core'\nimport { ForecastData, iconImage as getIconImage } from '../../services/forecast.service'\nimport { Unit } from '../forecast/forcastSlice'\nimport { dateFromDatetime } from '../../utils/dateHelpers'\nimport { averageSegmentTemp } from '../../utils/temperatureHelpers'\nimport styles from './Weather.module.css'\n\nexport type WeatherClickHandler = (dt: number) => void\n\ninterface WeatherProps {\n  forecast: ForecastData\n  segments: ForecastData[]\n  unit: Unit\n  activeForecastDt: number\n  onClick: WeatherClickHandler\n}\n\nexport default function Weather ({ segments, forecast, unit, activeForecastDt, onClick }: WeatherProps) {\n  const theme = useTheme()\n  const weather = forecast.weather[0]\n  const iconImage = getIconImage(weather.icon)\n  const date = dateFromDatetime(forecast.dt_txt)\n  const temperature = averageSegmentTemp(segments, unit)\n  const isActive = forecast.dt === activeForecastDt\n  const activeCardBackground = isActive ? theme.palette.grey[100] : ''\n\n  const handleClick = () => {\n    onClick(forecast.dt)\n  }\n\n  return (\n    <Grid item xs={12} sm={4}>\n      <Card variant=\"outlined\" className={styles.card} style={{ backgroundColor: activeCardBackground }} onClick={handleClick} data-testid=\"weatherCard\">\n        <CardContent>\n          <Typography variant=\"h6\" color=\"secondary\">\n            {temperature}\n          </Typography>\n          <Typography variant=\"h6\">{weather.main}</Typography>\n          <Typography color=\"textSecondary\">{weather.description}</Typography>\n          <img className={styles.icon} src={iconImage} alt=\"Current weather icon\" />\n          <Typography variant=\"subtitle2\">{date}</Typography>\n        </CardContent>\n      </Card>\n    </Grid>\n  )\n}\n","import React from 'react'\nimport { Box, Grid, IconButton } from '@material-ui/core'\nimport { NavigateBeforeOutlined, NavigateNextOutlined } from '@material-ui/icons'\nimport { capitalize } from 'lodash'\nimport { ForecastData } from '../../services/forecast.service'\nimport { Unit } from '../forecast/forcastSlice'\nimport Weather, { WeatherClickHandler } from '../weather/Weather'\nimport { segmentsFromForecast } from '../../utils/forecastHelpers'\nimport styles from './Carousel.module.css'\n\nexport type NavigateDirection = 'next' | 'previous'\nexport type NavigateHandleCallback = (direction: NavigateDirection) => void\n\ninterface WeatherCarouselProps {\n  forecasts: ForecastData[]\n  segments: ForecastData[]\n  unit: Unit\n  navigators: NavigateDirection[]\n  activeForecastDt: number\n  onNavigate: NavigateHandleCallback\n  onSelect: WeatherClickHandler\n}\n\ninterface CarouselNavigatorProps {\n  navigators: NavigateDirection[]\n  onNavigate: NavigateHandleCallback\n}\n\ninterface NavigateButtonProps {\n  direction: NavigateDirection\n  onNavigate: NavigateHandleCallback\n}\n\nexport const NavigateButton = ({ direction, onNavigate }: NavigateButtonProps) => {\n  const testId = `button${capitalize(direction)}`\n  const Icon = direction === 'previous' ? NavigateBeforeOutlined : NavigateNextOutlined\n\n  const handleClick = () => {\n    onNavigate(direction)\n  }\n\n  return (\n    <IconButton aria-label=\"delete\" className={styles.navigationButton} onClick={handleClick} data-testid={testId}>\n      <Icon />\n    </IconButton>\n  )\n}\n\nexport function CarouselNavigator ({ navigators, onNavigate }: CarouselNavigatorProps) {\n  const isNextOnlyNavigate = !navigators.includes('previous') && navigators.includes('next')\n  const justifyButtons = isNextOnlyNavigate ? 'flex-end' : 'space-between'\n\n  const navigateButtons = navigators.map((navigator) => (\n    <Grid item key={navigator}>\n      <NavigateButton direction={navigator} onNavigate={onNavigate} />\n    </Grid>\n  ))\n\n  return (\n    <Grid container justify=\"center\">\n      <Grid item xs={8}>\n        <Box mb={3}>\n          <Grid container justify={justifyButtons}>\n            {navigateButtons}\n          </Grid>\n        </Box>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default function WeatherCarousel ({\n  unit,\n  segments: weatherSegments,\n  forecasts,\n  navigators,\n  activeForecastDt,\n  onSelect,\n  onNavigate\n}: WeatherCarouselProps) {\n  const renderWeather = (forecast: ForecastData) => {\n    const segments = segmentsFromForecast(forecast, weatherSegments)\n\n    return (\n      <Weather\n        forecast={forecast}\n        segments={segments}\n        unit={unit}\n        activeForecastDt={activeForecastDt}\n        onClick={onSelect}\n        key={forecast.dt}\n      />\n    )\n  }\n\n  return (\n    <Box data-testid=\"weatherCarousel\">\n      <CarouselNavigator onNavigate={onNavigate} navigators={navigators} />\n      <Grid container spacing={3}>\n        {forecasts.map(renderWeather)}\n      </Grid>\n    </Box>\n  )\n}\n","import React, { useEffect, useState, useRef } from 'react'\nimport ResizeObserver from 'resize-observer-polyfill'\nimport { Paper, Typography } from '@material-ui/core'\nimport { select, selectAll } from 'd3-selection'\nimport { axisBottom, axisLeft } from 'd3-axis'\nimport { scaleLinear, scaleBand } from 'd3-scale'\nimport { max } from 'd3-array'\nimport styles from './BarChart.module.css'\nimport { withUnit } from '../../utils/temperatureHelpers'\nimport { Unit } from '../forecast/forcastSlice'\n\ntype Data = {\n  time: string\n  value: number\n}\n\ninterface BarChartProps {\n  chartId: string\n  data: Data[]\n  width: number\n  height: number\n  top: number\n  right: number\n  bottom: number\n  left: number\n  fill: string\n  suffix: Unit\n}\n\nconst d3 = {\n  select,\n  selectAll,\n  axisBottom,\n  scaleLinear,\n  axisLeft,\n  scaleBand,\n  max\n}\n\nconst baseTooltipDiamension = { width: 0, height: 0 }\n// const temperature = withUnit(formattedValue, unit)\n\nconst makeDivId = (str: string) => str.replace(/[^A-Z0-9]+/gi, '').toLowerCase()\n\nconst clamp = (min: number, d: number, max: number) => {\n  return Math.max(min, Math.min(max, d))\n}\n\nconst BarChart = ({ chartId = '', data, width, height, left, top, right, bottom, fill, suffix }: BarChartProps) => {\n  const [chartWidth, setChartWidth] = useState(width)\n  const [chartHeight, setChartHeight] = useState(height)\n  const barChartWrapper = useRef<HTMLElement | any>(null)\n  const barChart = useRef<HTMLElement | any>(null)\n  const chartAreaWidth = chartWidth - left - right\n  const chartAreaHeight = chartHeight - top - bottom\n\n  const setDiamensions = (mutation: any) => {\n    const [currentMutationObject] = mutation\n    const {\n      contentRect: { width: contentRectWidth, height: contentRectHeight }\n    } = currentMutationObject\n    console.log(contentRectWidth, contentRectHeight)\n    if (contentRectHeight !== chartHeight || contentRectWidth !== chartWidth) {\n      console.log(contentRectWidth, contentRectHeight)\n      setChartWidth(contentRectWidth)\n      setChartHeight(contentRectHeight)\n    }\n  }\n\n  useEffect(() => {\n    renderChart()\n    return () => {}\n  }, [data, chartWidth, chartHeight])\n\n  useEffect(() => {\n    const observer = new ResizeObserver(setDiamensions)\n    const { current: currentNode } = barChartWrapper\n    observer.observe(currentNode)\n\n    return () => {\n      observer.unobserve(currentNode)\n      observer.disconnect()\n    }\n  }, [barChartWrapper.current])\n\n  const calculateTooltipDiamension = (event: any) => {\n    const tooltipHoverMargin = 16\n    const { offsetX: x, offsetY: y } = event\n    const tooltipDiamension = document.getElementById(`${chartId}-tooltip`)?.getBoundingClientRect()\n    const { width: tooltipWidth, height: tooltipHeight } = tooltipDiamension || baseTooltipDiamension\n    const marginLeft = clamp(\n      tooltipHoverMargin,\n      x + tooltipHoverMargin,\n      chartAreaWidth - tooltipWidth - tooltipHoverMargin + left\n    )\n\n    const marginTop =\n      chartAreaHeight > y + tooltipHoverMargin + tooltipHeight\n        ? y + tooltipHoverMargin\n        : y - tooltipHeight - tooltipHoverMargin\n\n    return { marginLeft, marginTop }\n  }\n\n  function handleMouseOverVoronoiWrapper (event: any) {\n    const point = event.target.__data__\n    const { marginLeft, marginTop } = calculateTooltipDiamension(event)\n\n    d3.select(`#${chartId}-tooltip`)\n      .style('visibility', 'visible')\n      .style('top', `${marginTop}px`)\n      .style('left', `${marginLeft}px`)\n\n    d3.select(`#${chartId}-point-wrapper .tooltip-title`).text('Temprature')\n    d3.select(`#point-ls-${makeDivId(point.time)}`).style('display', 'flex')\n    d3.select(`#point-ls-${makeDivId(point.time)} .pointer`)\n      .style('background-color', fill)\n      .style('display', 'block')\n    d3.select(`#point-ls-${makeDivId(point.time)} .point-label`)\n      .text(`${point.time}:`)\n      .style('display', 'block')\n    d3.select(`#point-ls-${makeDivId(point.time)} .point-value`)\n      .text(withUnit(point.value, suffix))\n      .style('display', 'block')\n  }\n\n  function handleMouseMove (event: any) {\n    const { marginLeft, marginTop } = calculateTooltipDiamension(event)\n    d3.select(`#${chartId}-tooltip`).style('top', `${marginTop}px`).style('left', `${marginLeft}px`)\n  }\n\n  const handleMouseOut = () => {\n    d3.selectAll('.point-ls').style('display', 'none')\n    d3.select(`#${chartId}-tooltip`).style('visibility', 'hidden')\n  }\n\n  const renderChart = () => {\n    const svgObj = d3.select(barChart.current).select(`#${chartId}-chart-wrapper`)\n\n    const x = d3\n      .scaleBand()\n      .domain(data.map((d: { time: any }) => d.time))\n      .range([0, chartAreaWidth])\n      .padding(0.1)\n\n    const y = d3\n      .scaleLinear()\n      .domain([0, d3.max(data, (d: Data) => (d as Data).value)] as number[])\n      .nice()\n      .rangeRound([chartAreaHeight, 0])\n\n    svgObj\n      .selectAll('.bar')\n      .data(data)\n      .attr('fill', fill)\n      .attr('x', (d: { time: any }) => x(d.time) || 0)\n      .attr('width', x.bandwidth())\n      .attr('y', (d: { value: any }) => y(d.value))\n      .attr('height', (d: { value: any }) => chartAreaHeight - y(d.value))\n      .on('mouseover', handleMouseOverVoronoiWrapper)\n      .on('mousemove', handleMouseMove)\n      .on('mouseout', handleMouseOut)\n\n    svgObj\n      .select<SVGGElement>('#bottom-axis')\n      .attr('transform', `translate(0,${chartAreaHeight})`)\n      .call(d3.axisBottom(x))\n\n    svgObj.select<SVGGElement>('#left-axis').call(\n      d3\n        .axisLeft(y)\n        .tickFormat((d) => withUnit(d as any, suffix))\n        .ticks(5)\n    )\n  }\n\n  return (\n    <div id=\"bar-chart-wrapper\" data-testid=\"barChart\" className={styles.barChartWrapper} ref={barChartWrapper}>\n      <svg id=\"bar-chart\" style={{ width: chartWidth, height: chartHeight }} ref={barChart}>\n        <g id={`${chartId}-chart-wrapper`} transform={`translate(${left},${top})`} className=\"chart-wrapper\">\n          {data.map((item) => (\n            <rect key={`${makeDivId(item.time)}-${Math.random() * 100}`} className=\"bar\" />\n          ))}\n          <g id=\"bottom-axis\" className={`${styles.axis} ${styles.axisBottom}`} />\n          <g id=\"left-axis\" className={styles.axis} />\n        </g>\n      </svg>\n      <Paper id={`${chartId}-tooltip`} className={styles.tooltipWrapper}>\n        <div id={`${chartId}-point-wrapper`}>\n          <div className=\"point-title-wrapper\" id={`${chartId}-point-title-wrapper`}>\n            <Typography variant=\"button\" className=\"tooltip-title\" gutterBottom />\n          </div>\n          {data.map((item) => (\n            <div\n              key={`tooltip-item-${makeDivId(item.time)}-${Math.random() * 100}`}\n              id={`point-ls-${makeDivId(item.time)}`}\n              className={`point-ls ${styles.point}`}\n            >\n              <div className={styles.pointWrapper}>\n                <div className={`pointer ${styles.pointer}`} />\n                <Typography variant=\"subtitle1\" className=\"point-label\" />\n              </div>\n              <Typography variant=\"button\" className=\"point-value\" color=\"textPrimary\" />\n            </div>\n          ))}\n        </div>\n      </Paper>\n    </div>\n  )\n}\n\nexport default BarChart\n","import React, { memo } from 'react'\nimport { Box, Card, CardContent, Grid } from '@material-ui/core'\nimport { useTheme } from '@material-ui/core/styles'\nimport { isEqual } from 'lodash'\nimport { Unit } from '../forecast/forcastSlice'\nimport { ForecastData } from '../../services/forecast.service'\nimport BarChart from '../BarChart/BarChart'\nimport { WeatherChartConfig, getWeatherChartConfig } from '../../services/chart.service'\n\ninterface WeatherChartProps {\n  forecast: ForecastData\n  segments: ForecastData[]\n  unit: Unit\n}\n\nfunction WeatherChart ({ segments, unit }: WeatherChartProps) {\n  const theme = useTheme()\n  const config: WeatherChartConfig = { segments, unit, theme }\n  const chartConfig = getWeatherChartConfig(config)\n\n  return (\n    <Grid container>\n      <Grid item xs={12}>\n        <Box my={3}>\n          <Card variant=\"outlined\" data-testid=\"weatherChart\">\n            <CardContent>\n              <Box>\n                <BarChart\n                  chartId=\"weather-chart\"\n                  data={chartConfig.data}\n                  top={10}\n                  right={10}\n                  bottom={50}\n                  left={40}\n                  width={880}\n                  height={440}\n                  fill={chartConfig.color}\n                  suffix={chartConfig.sufix}\n                />\n              </Box>\n            </CardContent>\n          </Card>\n        </Box>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default memo(WeatherChart, isEqual)\n","import { Theme } from '@material-ui/core'\nimport { ForecastData } from './forecast.service'\nimport { Unit } from '../components/forecast/forcastSlice'\nimport { timeFromDatetime } from '../utils/dateHelpers'\nimport { averageForecastTemp } from '../utils/temperatureHelpers'\n\nexport interface WeatherChartConfig {\n  segments: ForecastData[]\n  unit: Unit\n  theme: Theme\n}\n\nexport const getWeatherChartConfig = ({ segments, unit, theme }: WeatherChartConfig) => {\n  const chartData = segments.map((segement) => ({\n    time: timeFromDatetime(segement.dt_txt),\n    value: averageForecastTemp(segement, unit)\n  }))\n\n  const data = {\n    data: chartData,\n    color: theme.palette.secondary.main,\n    sufix: unit\n  }\n  return { ...data }\n}\n","import React, { Fragment, useCallback, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { ForecastData } from '../../services/forecast.service'\nimport { Unit, ForecastActions, ForecastSelectors, selectors, actions } from './forcastSlice'\nimport UnitSwitch from '../../components/unitSwitch/UnitSwitch'\nimport Carousel, { NavigateDirection } from '../../components/carousel/Carousel'\nimport WeatherChart from '../../components/weatherChart/WeatherChart'\n\nexport interface ForecastProps {\n  forecasts: ForecastData[]\n}\n\ninterface ForecastCombinedProps extends ForecastProps, ForecastSelectors, ForecastActions {}\n\nfunction Forecast ({\n  forecasts,\n  activeForecast,\n  activeForecasts,\n  activeForecastSegments,\n  activeForecastsSegments,\n  carouselNavigators,\n  activeForecastDt,\n  unit,\n  replaceUnit,\n  incrementPageIndex,\n  decrementPageIndex,\n  replaceActiveForecastDt\n}: ForecastCombinedProps) {\n  const handleUnitChange = useCallback(\n    (unit: Unit) => {\n      replaceUnit(unit)\n    },\n    [replaceUnit]\n  )\n\n  const handleCarouselNavigate = useCallback(\n    (direction: NavigateDirection) => {\n      direction === 'next' ? incrementPageIndex() : decrementPageIndex()\n    },\n    [incrementPageIndex, decrementPageIndex]\n  )\n\n  function handleCarouselSelect (dt: number) {\n    replaceActiveForecastDt(dt)\n  }\n\n  function setDefaultActiveForcast () {\n    const defaultDt = forecasts[0].dt\n    replaceActiveForecastDt(defaultDt)\n  }\n\n  useEffect(() => {\n    setDefaultActiveForcast()\n  }, [])\n\n  return (\n    <Fragment>\n      <UnitSwitch unit={unit} onChange={handleUnitChange} />\n      <Carousel\n        forecasts={activeForecasts}\n        segments={activeForecastsSegments}\n        unit={unit}\n        navigators={carouselNavigators}\n        activeForecastDt={activeForecastDt}\n        onNavigate={handleCarouselNavigate}\n        onSelect={handleCarouselSelect}\n      />\n      {activeForecast && <WeatherChart forecast={activeForecast} segments={activeForecastSegments} unit={unit} />}\n    </Fragment>\n  )\n}\n\nexport default connect(selectors, actions)(Forecast)\n","import { AnyAction } from 'redux'\nimport { uniqBy } from 'lodash'\nimport { ForecastData } from '../../services/forecast.service'\nimport { NavigateDirection } from '../../components/carousel/Carousel'\nimport { ForecastProps } from './Forecast'\nimport { segmentsFromForecast, segmentsFromForecasts } from '../../utils/forecastHelpers'\n\nexport type Unit = 'celsius' | 'fahrenheit'\n\ninterface ForecastState {\n  unit: Unit\n  pageIndex: number\n  activeForecastDt: ForecastData['dt']\n}\n\nexport interface ForecastActions {\n  replaceUnit(unit: Unit): AnyAction\n  incrementPageIndex(): AnyAction\n  decrementPageIndex(): AnyAction\n  replaceActiveForecastDt(dt: number): AnyAction\n}\n\nexport interface ForecastSelectors extends ForecastState {\n  dailyForecasts: ForecastData[]\n  activeForecasts: ForecastData[]\n  activeForecastsSegments: ForecastData[]\n  carouselNavigators: NavigateDirection[]\n  activeForecast: ForecastData | null\n  activeForecastSegments: ForecastData[]\n}\n\nconst forecast: ForecastState = {\n  unit: 'fahrenheit',\n  pageIndex: 0,\n  activeForecastDt: 0\n}\n\nexport const actions: ForecastActions = {\n  replaceUnit (unit) {\n    return { type: 'REPLACE_FORECAST_UNIT', unit }\n  },\n  incrementPageIndex () {\n    return { type: 'INCREMENT_FORECAST_PAGE_INDEX' }\n  },\n  decrementPageIndex () {\n    return { type: 'DECREMENT_FORECAST_PAGE_INDEX' }\n  },\n  replaceActiveForecastDt (dt) {\n    return { type: 'REPLACE_FORECAST_ACTIVE_FORECAST_DT', dt }\n  }\n}\n\nexport function reducers (state = forecast, action: AnyAction) {\n  switch (action.type) {\n    case 'REPLACE_FORECAST_UNIT':\n      forecast.unit = action.unit\n      return { ...forecast }\n    case 'INCREMENT_FORECAST_PAGE_INDEX':\n      forecast.pageIndex = forecast.pageIndex + 1\n      return { ...forecast }\n    case 'DECREMENT_FORECAST_PAGE_INDEX':\n      forecast.pageIndex = forecast.pageIndex - 1\n      return { ...forecast }\n    case 'REPLACE_FORECAST_ACTIVE_FORECAST_DT':\n      forecast.activeForecastDt = action.dt\n      return { ...forecast }\n    default:\n      return state\n  }\n}\n\nexport function selectors (state: { forecast: ForecastState }, props: ForecastProps): ForecastSelectors {\n  const carouselSize = 3\n  const current = state.forecast\n  const derived = {\n    get dailyForecasts () {\n      return uniqBy(props.forecasts, 'date')\n    },\n    get activeForecasts () {\n      const { pageIndex: startIndex } = current\n      return this.dailyForecasts.splice(startIndex, carouselSize)\n    },\n    get activeForecastsSegments () {\n      return segmentsFromForecasts(this.activeForecasts, props.forecasts)\n    },\n    get carouselNavigators () {\n      const navigators: NavigateDirection[] = []\n      const canPrevious = current.pageIndex > 0\n      const canNext = this.dailyForecasts[current.pageIndex + carouselSize]\n      if (canPrevious) navigators.push('previous')\n      if (canNext) navigators.push('next')\n      return navigators\n    },\n    get activeForecast () {\n      const { activeForecastDt: dt } = current\n      const active = this.dailyForecasts.find((forecast) => forecast.dt === dt)\n      return active || null\n    },\n    get activeForecastSegments () {\n      if (!this.activeForecast) return []\n      return segmentsFromForecast(this.activeForecast, props.forecasts)\n    }\n  }\n  return { ...current, ...derived }\n}\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { IconButton, Snackbar } from '@material-ui/core'\nimport { Close } from '@material-ui/icons'\nimport { actions, selectors, AlertSelectors, AlertActions } from './alertSlice'\n\ninterface AlertProps extends AlertSelectors, AlertActions {}\n\nfunction Alert ({ message, isOpen, clearMessage }: AlertProps) {\n  const handleClose = () => {\n    clearMessage()\n  }\n\n  return (\n    <Snackbar\n      open={isOpen}\n      message={message}\n      autoHideDuration={6000}\n      action={\n        <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\n          <Close fontSize=\"small\" />\n        </IconButton>\n      }\n      onClose={handleClose}\n      data-testid=\"alert\"\n    />\n  )\n}\n\nexport default connect(selectors, actions)(Alert)\n","import React, { useEffect } from 'react'\nimport { Container } from '@material-ui/core'\nimport { connect } from 'react-redux'\nimport { ForecastListCancel, list } from '../../services/forecast.service'\nimport { actions, selectors, AppSelectors, AppActions } from './appSlice'\nimport Loading from '../loading/Loading'\nimport Forecast from '../forcast/Forecast'\nimport Alert from '../../components/alert/Alert'\n\ninterface AppProps extends AppSelectors, AppActions {}\n\nfunction App ({ hasForecasts, forecasts, replaceForecasts }: AppProps) {\n  let cancelListForecast: ForecastListCancel | null = null\n  async function listForecast () {\n    const [forecasts, cancel] = await list()\n    cancelListForecast = cancel\n    if (forecasts) replaceForecasts(forecasts)\n  }\n\n  useEffect(() => {\n    listForecast()\n    return () => {\n      if (cancelListForecast) cancelListForecast()\n    }\n  }, [])\n\n  return (\n    <Container maxWidth=\"md\">\n      {hasForecasts ? <Forecast forecasts={forecasts} /> : <Loading />}\n      <Alert />\n    </Container>\n  )\n}\n\nexport default connect(selectors, actions)(App)\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React, { ReactNode } from 'react'\nimport { Provider as StateProvider } from 'react-redux'\nimport { ThemeProvider } from '@material-ui/styles'\nimport store from '../../app/store'\n\n// Strict mode issue: https://github.com/mui-org/material-ui/issues/13394\nimport { unstable_createMuiStrictModeTheme as createTheme } from '@material-ui/core'\n\ninterface ProviderProps {\n  children: ReactNode\n}\n\nconst theme = createTheme({\n  typography: {\n    fontFamily: 'Inter, sans-serif'\n  }\n})\n\nexport default function Provider ({ children }: ProviderProps) {\n  return (\n    <StateProvider store={store}>\n      <ThemeProvider theme={theme}>{children}</ThemeProvider>\n    </StateProvider>\n  )\n}\n","import { Box, Typography } from '@material-ui/core'\nimport React, { Component } from 'react'\nimport styles from './ErrorBoundary.module.css'\n\ninterface ErrorBoundaryProps {}\n\ninterface ErrorBoundaryState {\n  message: string | null\n}\n\nexport default class ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  constructor (props: ErrorBoundaryProps) {\n    super(props)\n    this.state = {\n      message: null\n    }\n  }\n\n  static getDerivedStateFromError (error: Error) {\n    return { message: error.message }\n  }\n\n  render () {\n    if (this.state.message) {\n      return (\n        <div className={styles.root}>\n          <Box>\n            <Typography variant=\"h6\">Something went wrong!</Typography>\n            <Typography color=\"textSecondary\">{this.state.message}</Typography>\n          </Box>\n        </div>\n      )\n    }\n    return this.props.children\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport 'resize-observer-polyfill'\n\nimport App from './features/app/App'\nimport reportWebVitals from './reportWebVitals'\nimport Provider from './components/provider/Provider'\nimport ErrorBoundary from './components/errorBoundary/ErrorBoundary'\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ErrorBoundary>\n      <Provider>\n        <App />\n      </Provider>\n      <CssBaseline />\n    </ErrorBoundary>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"barChartWrapper\":\"BarChart_barChartWrapper__2gviE\",\"svg\":\"BarChart_svg__1i2Hh\",\"tooltipWrapper\":\"BarChart_tooltipWrapper__XNkb7\",\"point\":\"BarChart_point__1Buei\",\"pointWrapper\":\"BarChart_pointWrapper__1-U2B\",\"pointer\":\"BarChart_pointer__1tDvo\",\"axis\":\"BarChart_axis__3MvIL\",\"axisBottom\":\"BarChart_axisBottom__1QYu_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Loading_root__3ehdt\",\"loader\":\"Loading_loader__jPoa6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Weather_card__pk4ps\",\"icon\":\"Weather_icon__39CeW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navigationButton\":\"Carousel_navigationButton__KumsZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ErrorBoundary_root__29Znu\"};"],"sourceRoot":""}